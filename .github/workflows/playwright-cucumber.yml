name: Playwright-Cucumber Test Automation

on:
  # Trigger on push to main/master branches
  push:
    branches: [ main, master, develop ]
  
  # Trigger on pull requests
  pull_request:
    branches: [ main, master, develop ]
  
  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - demo
      browser:
        description: 'Browser to test with'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - chromium
        - firefox
        - webkit
        - edge
      headless:
        description: 'Run tests in headless mode'
        required: true
        default: true
        type: boolean
      tags:
        description: 'Cucumber tags to run (e.g., @smoke, @regression)'
        required: false
        default: '@smoke'
        type: string

  # Schedule daily runs
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily

# Environment variables for all jobs
env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Install dependencies
        run: npm ci
        
      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: true
        
      - name: 🔧 Run TypeScript compiler
        run: npm run type-check
        
      - name: 📋 Generate lint report
        if: always()
        run: |
          npm run lint -- --format json --output-file lint-results.json || true
          echo "Lint results generated"
          
      - name: 📤 Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: lint-results.json
          retention-days: 30

  # Job 2: Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: 🔍 Run Snyk security scan
        if: github.event_name == 'pull_request'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Job 3: Test Execution Matrix
  test-execution:
    name: 🧪 Test Execution
    runs-on: ${{ matrix.os }}
    needs: [lint-and-typecheck]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
        include:
          # Add Edge for Windows
          - os: windows-latest
            browser: edge
        exclude:
          # WebKit on Linux can be unstable
          - os: ubuntu-latest
            browser: webkit
    
    env:
      # Environment configuration
      BASE_URL: ${{ github.event.inputs.environment == 'production' && 'https://your-prod-app.com' || github.event.inputs.environment == 'staging' && 'https://your-staging-app.com' || 'https://demo.playwright.dev' }}
      BROWSER: ${{ matrix.browser }}
      HEADED: ${{ github.event.inputs.headless == 'false' && 'true' || 'false' }}
      CI: true
      PARALLEL: 2
      TIMEOUT: 60000
      DEBUG: false
      SETUP_AUTH: true
      CLEANUP_TEMP: true
      ARCHIVE_ARTIFACTS: true
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps
        
      - name: 🧪 Run Cucumber tests
        id: tests
        run: |
          if [ "${{ github.event.inputs.tags }}" != "" ]; then
            npm run test:cucumber -- --tags "${{ github.event.inputs.tags }}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            npm run test:smoke
          else
            npm run test:regression
          fi
        env:
          CUCUMBER_TAGS: ${{ github.event.inputs.tags || '@smoke' }}
          
      - name: 📊 Generate HTML reports
        if: always()
        run: npm run report:generate
        
      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.browser }}
          path: |
            test-results/
            cucumber-reports/
            playwright-report/
            screenshots/
            videos/
            traces/
          retention-days: 30
          
      - name: 📤 Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.os }}-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30
          
      - name: 📊 Publish test results to GitHub
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Test Results (${{ matrix.os }}-${{ matrix.browser }})
          path: cucumber-reports/*.json
          reporter: java-junit
          fail-on-error: false

  # Job 4: Visual Regression Testing (if enabled)
  visual-regression:
    name: 👁️ Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    if: github.event_name == 'pull_request' || contains(github.event.inputs.tags, '@visual')
    
    env:
      BASE_URL: https://demo.playwright.dev
      BROWSER: chromium
      HEADED: false
      CI: true
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps
        
      - name: 👁️ Run visual regression tests
        run: npm run test:visual
        continue-on-error: true
        
      - name: 📤 Upload visual comparison results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-results
          path: |
            test-results/
            visual-comparisons/
          retention-days: 30

  # Job 5: Performance Testing
  performance-testing:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    if: github.event_name == 'schedule' || contains(github.event.inputs.tags, '@performance')
    
    env:
      BASE_URL: https://demo.playwright.dev
      BROWSER: chromium
      HEADED: false
      CI: true
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps
        
      - name: ⚡ Run performance tests
        run: npm run test:performance
        
      - name: 📊 Generate performance report
        if: always()
        run: npm run report:performance
        
      - name: 📤 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-reports/
            lighthouse-reports/
          retention-days: 30

  # Job 6: Cross-browser Compatibility (Full Suite)
  cross-browser-full:
    name: 🌐 Cross-Browser Full Suite
    runs-on: ubuntu-latest
    needs: [test-execution]
    if: github.event_name == 'schedule' || github.event.inputs.browser == 'all'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit, edge]
        
    env:
      BASE_URL: https://demo.playwright.dev
      BROWSER: ${{ matrix.browser }}
      HEADED: false
      CI: true
      PARALLEL: 1
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps
        
      - name: 🧪 Run full test suite
        run: npm run test:regression
        
      - name: 📤 Upload cross-browser results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-browser-${{ matrix.browser }}
          path: |
            test-results/
            cucumber-reports/
            playwright-report/
          retention-days: 30

  # Job 7: Test Summary and Notification
  test-summary:
    name: 📋 Test Summary & Notification
    runs-on: ubuntu-latest
    needs: [test-execution, visual-regression, performance-testing]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: 📋 Generate test summary
        run: |
          echo "# 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'demo' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Browser**: ${{ github.event.inputs.browser || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ github.event.inputs.tags || '@smoke' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test results and reports are available in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML reports can be downloaded and viewed locally" >> $GITHUB_STEP_SUMMARY
          
      - name: 📧 Notify on failure
        if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Playwright-Cucumber tests failed on ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 📈 Update test metrics
        if: always()
        run: |
          echo "Test metrics would be updated here"
          # This could integrate with monitoring tools like DataDog, New Relic, etc.

  # Job 8: Deploy Test Reports (for main branch)
  deploy-reports:
    name: 🚀 Deploy Test Reports
    runs-on: ubuntu-latest
    needs: [test-execution]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      pages: write
      id-token: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-ubuntu-latest-chromium
          path: ./public
          
      - name: 🚀 Deploy to GitHub Pages
        uses: actions/deploy-pages@v3
        with:
          path: ./public
          
      - name: 📝 Comment on PR with report link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🧪 Test Results\\n\\n✅ Tests completed successfully!\\n\\n📊 [View detailed HTML report](https://your-username.github.io/your-repo-name/)\\n\\n🔍 Check the artifacts section for downloadable reports.'
            })
